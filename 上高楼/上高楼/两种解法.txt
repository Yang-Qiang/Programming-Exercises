#include<iostream>
using namespace std;
int main()
{
	int n;
	while (cin >> n)
	{
		long long result = 0;
		long long first = 1;
		long long second = 1;
		if(n == 1) result = 1;
		for (int i = 2;i <= n;i++)
		{
			result = (first + second)% 1000000007;
			second = first;
			first = result;
		}

		cout <<result<< endl;
	}
}

#include<iostream>
using namespace std;
auto matrixmul(long long a[], long long b[], long long result[])
{
	const long long mod = 1000000007;
	long long temp[4];
	temp[0] = a[0] * b[0] + a[1] * b[2];
	temp[1] = a[0] * b[1] + a[1] * b[3];
	temp[2] = a[2] * b[0] + a[3] * b[2];
	temp[3] = a[2] * b[1] + a[3] * b[3];
	result[0] = temp[0] % mod; result[1] = temp[1] % mod; result[2] = temp[2] % mod; result[3] = temp[3] % mod;
	//&是附属函数，this是成员化，但这里最好先放在临时缓冲中，最后统一写入，避免了前后一样的内存。
};
int main()
{
	int n;
	const long long mod = 1000000007;
	while (cin>>n)
	{
		long long powmatrix[] = { 1,1,1,0 }, weight[] = { 1,0,0,1 };
		//多次幂的积记录在weight中，先为单位，底数是三个1，这按照乘法的规律来。
		n++;
		int times = n - 2;
		if (n <= 2) return 1;
		while (times != 0)
		{
			//注意低取方案是全1 。
			if (times & 1)
				matrixmul(powmatrix, weight, weight);
			//标准方案，倍幂总是计算，若有1则先乘入，这要为先。
			matrixmul(powmatrix, powmatrix, powmatrix);
			times >>= 1;
		}
		cout<< (weight[0] + weight[1]) % mod<<endl;
	}
}